generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  name     String
  email    String  @unique
  password String
  role     Role    @default(CUSTOMER)
  isActive Boolean @default(true)

  vendors Vendor[]
  orders  Order[]

  createdAt DateTime @default(now())
}

model Vendor {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  phone       String?

  userId     Int
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  products   Product[]
  categories Category[]

  createdAt DateTime @default(now())

  @@index([userId])
}

model Category {
  id   Int    @id @default(autoincrement())
  name String

  products Product[]
  vendor   Vendor?   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  vendorId Int?
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Decimal  @default(0.00)
  stock       Int
  isArchived  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  vendorId   Int
  vendor     Vendor         @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  categoryId Int
  category   Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  images     ProductImage[]
  orderItems OrderItem[]

  @@index([vendorId])
  @@index([categoryId])
  @@index([name])
}

model ProductImage {
  id       Int    @id @default(autoincrement())
  imageUrl String

  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Order {
  id          Int         @id @default(autoincrement())
  totalAmount Decimal     @default(0.00)
  status      OrderStatus
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  userId     Int
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  payments   Payment[]
  shippings  Shipping[]

  @@index([userId])
  @@index([status])
}

model OrderItem {
  id       Int     @id @default(autoincrement())
  quantity Int
  price    Decimal @default(0.00)

  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([productId])
}

model Payment {
  id     Int           @id @default(autoincrement())
  method PaymentMethod
  amount Decimal       @default(0.00)
  date   DateTime      @default(now())

  orderId Int
  order   Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
}

model Shipping {
  id            Int       @id @default(autoincrement())
  address       String
  city          String
  state         String
  postalCode    String
  country       String
  shippedDate   DateTime?
  deliveredDate DateTime?

  orderId Int
  order   Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
}

enum Role {
  CUSTOMER
  VENDOR
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  ONLINE
  DELIVERY
}
