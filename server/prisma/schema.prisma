generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  password String
  role     Role   @default(CUSTOMER)

  @@index([email])
}

enum Role {
  CUSTOMER
  AMDIN
}

model Customer {
  id       Int     @id @default(autoincrement())
  name     String
  email    String  @unique
  password String
  role     Role    @default(CUSTOMER)
  orders   Order[]
}

model Billboard {
  id        String     @id @default(uuid())
  label     String
  imageUrl  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  category  Category[] // One-to-many relationship with Category
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  products    Product[] @relation("CategoryToProduct")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([billboardId])
}

model Product {
  id         String  @id @default(uuid())
  price      Decimal
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)
  name       String
  images     Image[]

  orderItems OrderItem[]
  categoryId String
  category   Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([categoryId])
}

model OrderItem {
  id String @id @default(uuid())

  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])

  quantity Int     @default(1)
  price    Decimal

  @@index([orderId])
  @@index([productId])
}

model Order {
  id     String  @id @default(uuid())
  isPaid Boolean @default(false)
  status String  @default("pending")

  customerId Int
  customer   Customer    @relation(fields: [customerId], references: [id])
  orderItems OrderItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([customerId])
}

model Image {
  id  String @id @default(uuid())
  url String

  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}
